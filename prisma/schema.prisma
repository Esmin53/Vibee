// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      =  env("DATABASE_URL")
  directUrl =   env("DIRECT_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  sentMessages  Message[] @relation("SentMessages")
  recievedMessages Message[] @relation("RecievedMessages")

  sentRequest MessageRequest[] @relation("SentRequest")
  recievedRequest MessageRequest[] @relation("RecievedRequest")

  User1 Conversation[] @relation("User1")
  User2 Conversation[] @relation("User2")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Conversation {
  messages  Message[] 
  UserAId      String
  sender        User      @relation("User1",fields: [UserAId], references: [id])    

  UserBId    String
  reciever      User      @relation("User2", fields: [UserBId], references: [id]) 

  id  String @id @default(cuid())
}

model MessageRequest {
  id    String  @id   @default(cuid())

  senderId      String
  sender        User      @relation("SentRequest",fields: [senderId], references: [id])    

  recieverId    String
  reciever      User      @relation("RecievedRequest", fields: [recieverId], references: [id]) 
  status      RequestStatus
  messages      Message[]
}

model Message {
  id            String    @id  @default(cuid())
  senderId      String
  sender        User      @relation("SentMessages",fields: [senderId], references: [id])    

  recieverId    String
  reciever      User      @relation("RecievedMessages", fields: [recieverId], references: [id])    

  conversationId  String?
  conversation    Conversation?  @relation(fields: [conversationId], references: [id])
  requestId       String?
  request         MessageRequest? @relation(fields: [requestId], references: [id])

  
  //@@unique([senderId, recieverId, conversationId])
  

  text          String
  createdAt     DateTime @default(now())
}